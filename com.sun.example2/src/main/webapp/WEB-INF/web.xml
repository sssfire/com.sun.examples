<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>sun.springMVC1</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<!-- 
		启动顺序：
		S1. context-param
		S2. listener
		S3. filter
		S4. servlet
	 -->

	<!-- 	
		- 配置文件路径，指定业务层Spring容器的配置文件
		- 如果指定多个配置文件，则使用逗号隔开
	 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:config/applicationContext.xml</param-value>
	</context-param>
	<!--
		- 下面所指定的Listener会通过ContextConfigLocaltion所指定的配置文件启动业务层的Spring容器 
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<servlet>
		<servlet-name>springMVC</servlet-name>
		<!-- 
			- SpringMVC 的入口
			- 一个web.xml可以配置多个DispatchServlet,通过<servlet-mapping>可以让每个DispatchServlet处理不同的请求 
		-->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 
			- 配置并启动Web层的Spring容器
			- Web层Spring容器将作为业务层Spring容器的子容器，所以Web层容器可以引用业务层容器的Bean，而业务层Spring容器不能引用Web层容器的Bean
			- 如果下面信息不写为默认路径，在WEB-INF目录下默认配置文件为<servlet-name>-servlet.xml
		-->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:config/spring-servlet.xml</param-value>
		</init-param>
		<!-- 定义什么时候启动，值为1时为tomcat启动时该servlet启动，值越小启动越早 -->
		<load-on-startup>1</load-on-startup>
	</servlet>

    <filter>  
        <filter-name>encodingFilter</filter-name>  
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>  
        <init-param>  
            <param-name>encoding</param-name>  
            <param-value>UTF-8</param-value>  
        </init-param>  
        <init-param>  
            <param-name>forceEncoding</param-name>  
            <param-value>true</param-value>  
        </init-param>  
    </filter>  
    <!-- encoding filter for jsp page -->  
    <filter-mapping>  
        <filter-name>encodingFilter</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping>  

	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<!-- 指定Spring可以接受的URL的样式，此时可以接受所有请求 -->
		<url-pattern>/</url-pattern>
		<!-- 接受xxx.do结尾的URL -->
		<!-- url-pattern>*.do</url-pattern -->
	</servlet-mapping>
</web-app>